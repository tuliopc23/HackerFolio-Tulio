gotcha. here’s a tight, power-user prompt you can drop into Lovable (or any AI coding agent) to build your portfolio with a vintage blue CRT / Lumon-inspired terminal vibe + tmux-style panes and interactive commands.

⸻

Agent Prompt — “Terminal Aesthetic Portfolio (Lumon-inspired)”

Goal
Build a fast, accessible personal website that looks/feels like a vintage blue CRT terminal (inspired by Severance’s Lumon terminal) with neon syntax highlighting and a tmux-like multiplexer layout (multiple resizable panes). The homepage is an interactive “prompt” where visitors can run commands (whoami, grep, printd, etc.) to explore content.

Design references (for look & feel)
	•	Lumon Terminal Pro visuals: deep/teal blues, retro-futurist CRT cues, trackball-era UI, and color symbolism centered on blue.  ￼ ￼ ￼
	•	Official Lumon site’s terminal easter egg for tone (simple commands, corporate dystopia).  ￼
	•	tmux “terminal multiplexer” for the multi-pane concept.  ￼ ￼
	•	Web CRT effects & neon themes as inspiration for scanlines/glow + syntax vibe.  ￼ ￼

Tech stack
	•	Framework: SvelteKit + TypeScript (or Next.js if you must; prefer SvelteKit).
	•	Styling: Tailwind CSS v4 only (no PostCSS plugins beyond Tailwind).
	•	Terminal layer: xterm.js with command router (client-side).
	•	Icons: Lucide. Animations: small CSS transitions only (no heavy libs).
	•	Build: Vite. Deploy: Vercel.
	•	Content: Markdown for longform (projects, posts) compiled at build time.

Core pages & routes
	•	/ Interactive terminal (primary UX).
	•	/projects, /about, /contact, /resume as conventional routes (linked from commands).
	•	/api/health simple JSON for uptime checks.

Homepage (terminal) requirements
	•	Fullscreen CRT styling: subtle scanlines, bloom/glow, phosphor blur, slight vignette; base palette deep Lumon blue background with lighter cyan/teal text; 60/30/10 color balance skewed to blue.  ￼
	•	Multiplexer layout: CSS Grid for panes; default layout = (left) terminal; (right) split vertically into “status” panes (Now / Featured Project). Panes are draggable/resizable with pure CSS/JS (no heavy dependencies). Reference tmux semantics (pane titles, focus border).  ￼
	•	Prompt shows a blinking block cursor; input supports history (↑/↓), autocomplete (Tab), and command help.

Commands (implement these first)
	•	help — list commands with short docs.
	•	whoami — print profile: Tulio Cunha — Full-stack dev.
	•	grep stack — show tech stack categories:
	•	Languages: Swift, Rust, Go, TypeScript
	•	Web (full-stack): Svelte/SvelteKit, React, Next.js, Vite, Tailwind
	•	Cloud/Infra: AWS/GCP/Azure, Docker, CI/CD
	•	projects [filter] — list projects; open details in a right-pane view.
	•	printd contact — print contact card with mailto, X (Twitter), GitHub, LinkedIn.
	•	open <route|url> — navigate to internal routes or external links.
	•	theme <lumon|neon|mono> — swap presets (all kept blue-centric).
	•	clear, ls, cat <doc> — basic terminal niceties for immersion.
	•	(Optional fun) time and cams as a nod to Lumon easter eggs; cams returns “ACCESS DENIED.”  ￼

UI details
	•	Typography: monospaced, slightly rounded letterforms; ligatures off.
	•	Syntax highlight theme: neon/cyberpunk-leaning but constrained to blue/cyan accents to keep Lumon vibe; avoid rainbow.  ￼
	•	Pane chrome: 1px light-cyan borders, subtle outer glow, pane titles with [pane-01] style labels.
	•	Sound (optional, muted by default): low-fi key click + boot chime.
	•	Reduce motion: respect prefers-reduced-motion (disable scanline animation, cursor blink).

Content
	•	Seed data for: bio, skills, 6–8 highlighted projects (name, role, stack, links), and contact.
	•	Markdown files for /about, /projects/*, /resume (rendered in a right-pane reader with code-block highlighting).

Accessibility & performance
	•	Keyboard-first: all commands, focus rings, skip links.
	•	Screen readers: live region for terminal output; semantic headings in pane content.
	•	Color contrast ≥ WCAG AA on the blue palette.
	•	Lighthouse ≥ 95 on Performance/Best Practices/SEO (static assets, code-split).

Implementation steps
	1.	Scaffold SvelteKit + Tailwind v4; set global CSS for CRT (scanline background layer, glow, vignette). Base color tokens = deep blue background, cyan text, teal accents (derive from references).  ￼ ￼
	2.	Add xterm.js instance with command router + history, autocompletion, and a help table.
	3.	Build CSS Grid multiplexer: three panes (terminal left; two stacked on right). Add resize handles + focus state similar to tmux.  ￼
	4.	Implement commands above with typed handlers; content pulls from JSON/MD.
	5.	Add conventional routes mirroring terminal output for crawlability/SEO.
	6.	Ship a theming.ts with lumon, neon, mono presets (class toggles).
	7.	Add tests for command router and rendering; basic a11y checks.
	8.	Deploy to Vercel; set Cache-Control for static; add OG images.

Deliverables
	•	Public repo with README (screens, commands list, how to add new commands).
	•	Deployed URL.
	•	A THEMES.md screenshot sheet for the three presets.
	•	Lighthouse & a11y reports in /reports.

My details to hardcode (replace later with CMS if needed)
	•	Name: Tulio Cunha
	•	Title: Full-stack Developer
	•	Stack: Swift, Rust, Go, TypeScript; Svelte/SvelteKit, React/Next.js; AWS/GCP/Azure
	•	Links: mailto:…, GitHub, X/Twitter, LinkedIn

⸻

Want me to tailor this for Next.js instead of SvelteKit, or generate the initial repo + deploy script too?